priambula

pwd = paint working directory
ls = shows the current directory with files in it
ls -l = shows the current directory with details
ls -al + shows current directory with hidden files in it
mkdir = creates a folder
touch = creates a file
nano = editing the content of a file
cat = reading from the file
less = whole screen + scrolling up and down with keys
git config -- global user.name "" = comfigures username for remote repository
git config -- global user.email "" = configures email for remote repository
git blame = lets you see all the changes that were made to a file
git bisect = makes binary search
git log --pretty=oneline = shows all commits in one line
git log --pretty=format:"%h %s" -graph
git config --global alias.last 'log -1 HEAD' =
git last =
git log master..experiment =
git filter-branch --tree-filter 'rm -f passwords.txt' HEAD =
git config --global rerere.enabled true = enables rerere function
git rerere = automatically resolves merging or rebasing conflicts
git submodule =
git add origin = adds remote repository as origin
git remote remove origin = removes original repository
git add = adds file to the index= prepares file for further commit
git commit = is an actual commit
git log = shows the status of commits
git status = shows the actual situation of event[s]
git pull (git fetch + git merge) = sinchronizes commits in remote with local
git gui& = opens up a GUI window 
gitk& = opens up a page with the full history of any changes and commits
git show = shows the content of a file (e.g with the use of shiwuan codes)
git show -s --pretty=raw = Decipts a detailed info about a specified commit
git ls-tree = shows blob files and its shiwuan codes
          UNDOING CHANGES
git checkout -- (e.g. epic.txt) = restores the previous version of a file that was not comitted or pushed
git checkout . = restores the previous version of all files at the current and downward directories 
git clean -xdf = (x = git ignor, d = clean directory, f = force) cleans the specified file[s] that was not previously known to the git
git reset -- (e.g. epic.txt) = unstages the file from the index [that has not yet been commited]
git reset --mixed = Same as above
git reset --soft = brings one stage down from commit area to stage area
git reset --hard = removes all changes with no recourse effect 
git reset HEAD^^ (HEAD~2) = removes (resets) specified numbers of commits
git commit --amend -m "commit message" = amends the message of the commit
git revert (<sha1>) = reverts a pushed commit by the specifoed blob
           .gitignore
# no.log files
*.log
# but do track error.log, even though you are ignoring .log files above
!error,log
# only ignore TODO file in the current directory, not subdir/TODO
/TODO
# ignore all files in the build directory
build/
# ignore doc/notes.txt, but not doc/server/arch.txt
doc/*.txt
# ignore all .pdf files in the doc/ directory
doc/**/*.pdf
                           BRANCHING
git checkout feature = creates a brach in the main with the name of feature
git checkout main = git checkout feature = switches back and forth between main and feature
git merge feature = fast forward merging (shall be done by the main)  
git merge --abort = cancels the changhes and merging
git checkout --Xours --Xtheirs = If there is a conflict then either ours or theirs is coect
git diff =
git rebase main [or] master = rebases the commits' line on remote

git tag ver1 = sets versions to the blobs
git tag --list = lists all versions or whatever has been taged
git push --tags = pushes tags
git checkout ver1 = goes back to the specific position (e.g.tags, versions, blobs)

git stash save "" = saves unadded and uncommited but modified file to a directory where it can be dealt with later = lets you move to other braches without necessarily making commits
git stash list = lists stashed files
git stash pop = removes file from the stash directory but does not delet the file itself and one can continue working on it
git stash apply = does not delete the stashed file from the stash directory and one continue working on the stashed file
git stash drop = deletes the stashed file leaving no possibility for edit
git remote add <name> <url> = makes any specified remote repository as original
git remote -v = shows the server you are working with
git remote show <name> = same as git remote -v
git fetch = is the opposite of git push = brings from remote =|!= git pull
